def solveConduct2d(**kwargs):
    nx = 30
    ny = 30
    Tinitial = 0.25 * (Tup, Tdown, Tleft, Tright)
    T = np.ones((nx,ny)) * Tinitial
    T[0,:] = Tup
    T[nx - 1, :] = Tdown
    T[:,0] = Tleft
    T[:,ny-1] = Tright
    print T
    e = np.zeros(T.shape)
    error = 10
    acc = 0.01
    count = 0
    start_time = time.time()
    while error >= acc:
        count += 1
        for i in range(1,nx-1):
            for j in range(1, ny-1):
                T_old = T[i,j]
                T[i,j] = 0.25 * (T[i+1,j] + T[i-1,j] + T[i,j+1] + T[i,j-1])
                e[i,j] = abs(T[i,j] - T_old)
        error = np.linalg.norm(e)
    plt.figure()
    CS = plt.contourf(T,np.linspace(min(inputs), max(inputs), 12), linewidths = 1.5)
    plt.clabel(CS, inline=1, fontsize=10)
    plt.title("Temperature distribution")
    plt.colorbar(CS, shrink = 0.8, extend = 'both')
